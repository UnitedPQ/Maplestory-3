// Generated by CoffeeScript 1.8.0
var Dialog;

Dialog = (function() {
  function Dialog(options) {
    var defaults;
    defaults = {
      id: 'dialog',
      title: null,
      content: null,
      buttons: null,
      width: '90%',
      height: 'auto',
      position: 'center center',
      padding: 0,
      open: true
    };
    this.options = $.extend(false, {}, defaults, options);
    this.version = '1.0.0';
    if ($.dialog.get(this.options.id)) {
      $.dialog.get(this.options.id).close();
    }
    this.init();
    if (this.options.open) {
      this.open();
    }
  }

  Dialog.prototype.init = function() {
    var content, dialog, me, overlay, title;
    me = this;
    overlay = $('<div class="dialog-overlay"></div>');
    overlay.attr('id', this.options.id);
    overlay.css({
      'display': 'none',
      'position': 'fixed',
      'top': '0px',
      'left': '0px',
      'width': '100%',
      'height': '100%',
      'background-color': 'rgba(0,0,0,0.8)',
      'z-index': 999
    });
    if (!this.options.content) {
      overlay.addClass('dialog-loading');
    } else {
      dialog = $('<div class="dialog"></div>');
      if (this.options.title) {
        title = $('<div class="dialog-title"><strong>' + this.options.title + '</strong><a href="#" class="dialog-close">x</a></div>');
        title.appendTo(dialog);
      }
      if (this.options.content) {
        content = $('<div class="dialog-content">' + this.options.content + '</div>');
        content.appendTo(dialog);
      }
      dialog.css({
        'width': this.options.width,
        'height': this.options.height
      }).appendTo(overlay);
    }
    overlay.appendTo($('body'));
    overlay.find('.dialog-close').click(function(e) {
      e.preventDefault();
      return me.close();
    });
    return this.dialog = overlay;
  };

  Dialog.prototype.getId = function() {
    return this.options.id;
  };

  Dialog.prototype.close = function() {
    return this.dialog.remove();
  };

  Dialog.prototype.open = function() {
    var dH, dW, winH, winW;
    this.dialog.show();
    winW = $(window).width();
    winH = $(window).height();
    dW = this.dialog.find('.dialog').width();
    dH = this.dialog.find('.dialog').height();
    return this.dialog.find('.dialog').css({
      'position': 'fixed',
      'left': (winW - dW) / 2 + 'px',
      'top': (winH - dH) / 2 + 'px'
    });
  };

  return Dialog;

})();

$.dialog = {
  windows: {}
};

$.dialog.closeAll = function() {
  return $('body').find('.dialog-overlay').remove();
};

$.dialog.get = function(id) {
  return $.dialog.windows[id];
};

$.dialog.set = function(id, dialog) {
  return $.dialog.windows[id] = dialog;
};

$.dialog.loading = function(act) {
  var dialog;
  if (act === 'close') {
    return $.dialog.get('loading').close();
  } else {
    dialog = new Dialog({
      'id': 'loading'
    });
    return $.dialog.set('loading', dialog);
  }
};

$.fn.dialog = function(options) {
  var dialog, dialogId;
  dialogId = $(this).parents('.dialog-overlay').attr('id');
  dialog = $.dialog.get(dialogId);
  if (options === 'close') {
    dialog.close();
  } else if (options === 'open') {
    dialog.open();
  } else {
    if (!options) {
      options = {};
    }
    options.content = $(this).get(0).outerHTML;
    dialog = new Dialog(options);
    $.dialog.set(dialog.getId(), dialog);
  }
  return dialog;
};

$(document).on('click', 'a[data-trigger=dialog]', function(e) {
  var data, dataType, dialogHeight, dialogTitle, dialogWidth, me, method;
  e.preventDefault();
  me = $(this);
  if (!me.data('requesting')) {
    me.data('requesting', true);
    data = me.data();
    method = data['method'] ? data['method'] : 'get';
    dataType = data['type'] ? data['type'] : 'html';
    dialogTitle = data['title'] ? data['title'] : null;
    dialogWidth = data['width'] ? data['width'] : 'auto';
    dialogHeight = data['height'] ? data['height'] : 'auto';
    return $.ajax({
      url: data['url'],
      type: method,
      dataType: dataType,
      data: data['data'],
      beforeSend: function() {
        me.data('requesting', true);
        return me.trigger('ajax:before');
      },
      error: function() {
        return me.removeData('requesting');
      },
      success: function(response) {
        var html;
        me.removeData('requesting');
        html = dataType === 'json' ? response.html : response;
        return $(html).dialog({
          title: dialogTitle,
          width: dialogWidth,
          height: dialogHeight
        });
      }
    });
  }
}).on('submit', 'form[data-trigger=dialog]', function(e) {
  var data, dataType, dialogHeight, dialogTitle, dialogWidth, me;
  e.preventDefault();
  me = $(this);
  if (!me.data('requesting')) {
    me.data('requesting', true);
    data = me.data();
    dataType = data['type'] ? data['type'] : 'html';
    dialogTitle = data['title'] ? data['title'] : null;
    dialogWidth = data['width'] ? data['width'] : 'auto';
    dialogHeight = data['height'] ? data['height'] : 'auto';
    return $.ajax({
      url: me.attr('action'),
      type: me.attr('method'),
      dataType: dataType,
      data: me.serialize(),
      beforeSend: function() {
        me.data('requesting', true);
        return me.trigger('ajax:before');
      },
      error: function() {
        return me.removeData('requesting');
      },
      success: function(response) {
        var html;
        me.removeData('requesting');
        html = dataType === 'json' ? response.html : response;
        return $(html).dialog({
          title: dialogTitle,
          width: dialogWidth,
          height: dialogHeight
        });
      }
    });
  }
});
