// Generated by CoffeeScript 1.8.0
var Draw, Slide;

Slide = (function() {
  function Slide(obj) {
    this.obj = obj;
    this.listObj = this.obj.find('.slide-list ul');
    this.prevBtn = this.obj.find('.slide-left');
    this.nextBtn = this.obj.find('.slide-right');
    this.size = this.listObj.children().size();
    this.width = this.listObj.children().width();
    this.height = this.listObj.children().height();
    this.slideTime = 300;
    this.nowIndex = 1;
    this.index = 1;
    this.valueName = this.obj.data('name');
    this.valueObj = this.obj.find("input[name=" + this.valueName + "]");
  }

  Slide.prototype.slideIt = function(idx) {
    var nextIndex;
    if (idx === 'next') {
      nextIndex = this.nowIndex + 1;
    } else if (idx === 'prev') {
      nextIndex = this.nowIndex - 1;
    } else {
      nextIndex = idx >= 1 && idx <= this.size ? idx : this.nowIndex;
    }
    return this.listObj.animate({
      'margin-left': -1 * this.width * nextIndex + 'px'
    }, this.slideTime, (function(_this) {
      return function() {
        if (nextIndex === 0) {
          nextIndex = _this.size;
        } else if (nextIndex === _this.size + 1) {
          nextIndex = 1;
        }
        _this.nowIndex = nextIndex;
        return _this.listObj.css({
          'margin-left': -1 * _this.width * _this.nowIndex + 'px'
        });
      };
    })(this));
  };

  Slide.prototype.init = function() {
    var firstItem, lastItem;
    firstItem = this.listObj.children().first().clone();
    lastItem = this.listObj.children().last().clone();
    this.listObj.append(firstItem).prepend(lastItem);
    this.listObj.width(this.width * (this.size + 2)).css({
      'margin-left': -1 * this.width * this.nowIndex + 'px'
    });
    this.listObj.children().width(this.width).height(this.height);
    if (this.nextBtn) {
      this.nextBtn.click((function(_this) {
        return function() {
          _this.slideIt('next');
          return false;
        };
      })(this));
    }
    if (this.prevBtn) {
      this.prevBtn.click((function(_this) {
        return function() {
          _this.slideIt('prev');
          return false;
        };
      })(this));
    }
    return this;
  };

  return Slide;

})();

$.fn.slide = function() {
  return this.each(function() {
    var slideObj;
    slideObj = new Slide($(this));
    slideObj.init();
    return $(this).data('slide', slideObj);
  });
};

Draw = (function() {
  function Draw(el) {
    this.el = el;
    this.current = 0;
    this.width = this.el.width();
    this.height = this.el.height();
    this.timer = null;
    this.slideTime = 400;
    this.size = 4;
  }

  Draw.prototype.run = function(stop, callback, step) {
    if (step == null) {
      step = 0;
    }
    if (stop > this.size) {
      stop = stop % this.size;
    }
    this.current += 1;
    if (this.current > this.size) {
      this.current = 1;
    }
    this.el.css({
      'background-position': "-" + (this.width * this.current) + "px, 0px"
    });
    if (step < 3.3 || this.current !== stop) {
      return setTimeout((function(_this) {
        return function() {
          step += 0.08;
          return _this.run(stop, callback, step);
        };
      })(this), this.slideTime - (this.slideTime - 50) * Math.sin(step));
    } else {
      if (typeof callback === 'function') {
        return callback.call(this);
      }
    }
  };

  return Draw;

})();

$.fn.draw = function(stop, callback) {
  return this.each(function() {
    var draw;
    draw = $(this).data('draw');
    if (!draw) {
      draw = new Draw($(this));
      $(this).data('draw', draw);
    }
    return draw.run(stop, callback);
  });
};

$.alert = function(message, button, title) {
  var d;
  if (button == null) {
    button = [];
  }
  if (title == null) {
    title = '小V温馨提示...';
  }
  d = dialog({
    width: 380,
    title: title,
    content: message,
    okValue: '关闭',
    ok: function() {},
    button: button
  });
  return d.showModal();
};

$(document).ready(function() {
  if ($.support.pjax) {
    $(document).pjax('a[data-pjax]', '#pjax-container');
    return $(document).on('pjax:start', function() {
      return NProgress.start();
    }).on('pjax:end', function() {
      return NProgress.done();
    });
  }
});
